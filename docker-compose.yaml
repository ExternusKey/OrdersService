services:
  orderservice.api:
    build:
      context: .
      dockerfile: OrderService.API/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=Orders;Username=postgres;Password=postgres
      - ProducersConfig__BootstrapServers=kafka:9092
      - ConsumersConfig__BootstrapServers=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
        
  orderservice.daemon:
    build:
      context: .
      dockerfile: OrderService.Daemon/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=Orders;Username=postgres;Password=postgres
      - ProducersConfig__BootstrapServers=kafka:9092
      - ConsumersConfig__BootstrapServers=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: Orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
        test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
        interval: 10s
        timeout: 3s
        retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      retries: 10
      start_period: 20s
      timeout: 10s
      
  kafka-init:
    image: confluentinc/cp-kafka:latest
    restart: "no"
    entrypoint: [ "sh", "-c",
      "kafka-topics --bootstrap-server kafka:9092 \
      --create --if-not-exists --topic order_created --partitions 2 --replication-factor 1 && \
      kafka-topics --bootstrap-server kafka:9092 \
      --create --if-not-exists --topic order_confirmation_status --partitions 2 --replication-factor 1" ]
    depends_on:
      kafka:
        condition: service_healthy
  
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

volumes:
  postgres_data:
